{% comment %}

Get started
===========

Below you'll find the steps to create a Django project from scratch, using the
Maykin Media starting template. The ``<project_root>`` is typically placed in
your home directory or ``/srv/sites/``. It can be named anything but typical
examples are ``corporate``, ``website`` or more specific like
``acme-website``::

    $ mkdir <project_root>
    $ cd <project_root>

Create the virtual environment that holds your copy of Python and relevant
libraries::

    $ virtualenv env
    $ source env/bin/activate

If you have a global Django installation (not recommended but can be present
in development environments), you can skip the installation of Django at this
time, if not::

    $ pip install django

Finally, start a new Django project, named ``<project_name>``, using the
template. It can be usefull to use a ``<project_name>`` that serves as
namespace in your code, like ``maykinmedia``::

    $ python env/bin/django-admin.py startproject --template=https://bitbucket.org/maykinmedia/default-project/get/tip.zip --extension=py,rst,rb,html <project_name> .

You'll now have a starting point for your new project. Continue to the
installation instructions below and start at step 3.

**NOTE:** The section above will not be included in your project's README.
Below you'll see the actual project README template.

**Python 3 support!** 

Steps you'll want to take for Python 3 projects:

1. Replace `python` with `python3` calls in the documentation below.

2. Add ` --python=python3 ` to line 78 of bootstrap.py
    
3. Disable Sphinx in requirements/base.txt and django-debug-toolbar in requirements/development.txt (at least until their respective versions work properly in Python3). Remove the django-debug-toolbar settings in src/``<project_name>``/conf/settings_development.py.

4. Disable django-axes in requirements/base.txt and remove the axes middleware in src/``<project_name>``/conf/settings.py.

{% endcomment %}Project layout
==============

The project layout was made in such a way that code is seperated from non-code
files that you typically want to serve in another way (static and media files)
or keep in a different location (like the virtual environment)::

    {{ project_name|lower }}
    |
    +-- env                 -- Virtual environment files.
    |
    +-- src                 -- Container for one or more source directories.
    |   |
    |   +-- {{ project_name|lower }}
    |       |
    |       +-- conf        -- Django settings files.
    |       |
    |       +-- templates   -- Project templates
	|       |
	|       +-- wsgi        -- Default location for wsgi deployment scripts
	|       |
	|       +-- static      -- Default location for project static files
    |       |
    |       +-- ...         -- Project specific applications.
    |
    +-- static              -- Default location for collected static files.
    |
    +-- media               -- Default location for uploaded media files.
    |
    +-- log                 -- All log files generated by the project.
    |
    +-- doc                 -- Documentation source and generated files.
    |
    +-- requirements        -- Project requirements for each type of installation.


Installation
============

New installations (for development or production) should follow the steps
below.

1. Navigate to the location where you want to place your project.

2. Get the code::

    $ hg clone ssh://hg@bitbucket.org/maykinmedia/{{ project_name|lower }}
    $ cd {{ project_name|lower }}

3. Bootstrap the virtual environment and install all required libraries. The
   ``boostrap.py`` script basically sets the proper Django settings file to be
   used::

    $ python bootstrap.py <production|staging|test|development>
    
4. Activate your virtual environment and create the statics and database::

    $ source env/bin/activate
    $ cd src
    $ python manage.py collectstatic --link
    $ python manage.py syncdb --migrate


Developers
----------

Optionally, you can load demo data and extract demo media files::

    $ python manage.py loaddata demo
    $ cd ../media
    $ tar -xzf demo.tgz

You can now run your installation and point your browser to the address given
by this command::

    $ python manage.py runserver

If you are making local, machine specific, changes, add them to 
``src/{{ project_name|lower }}/conf/settings_local.py``. You can base this file on
the example file included in the same directory.

Enable SASS/Compass::

    $ compass watch

For more information on SASS and Compass, see: http://compass-style.org/


Staging and production
----------------------

Configure your webserver and/or WSGI handler. See: 
https://docs.djangoproject.com/en/dev/howto/deployment/

Note that your wsgi script in ``src/{{ project_name|lower }}/wsgi.py already
points to your staging|production settings.py file. This happens when
bootstrapping your environment.
    
Update installation
===================

When updating an existing installation::

1. Activate the virtual environment.

    $ cd {{ project_name|lower }}
    $ source env/bin/activate

2. Update the code and libraries::

    $ hg pull --update
    $ pip install -r requirements/<production|staging|test|development>.txt
    
3. Update the statics and database::

    $ cd src
    $ python manage.py collectstatic --link
    $ python manage.py syncdb --migrate
